MODULE	TestAbduction.

IMPORT	Abduction, Answers, ProgramsIO.


PREDICATE	Go : String	    % Name of the object program
	     	   * String	    % a goal for the object program
		   * String	    % answer substitutions
		   * List(String).  % abducibles

Go(prog_string, goal_string, answer_string, abducible_strings) <-
   ProgramCompile(prog_string, program) &
   MainModuleInProgram(program, module) &
   StringToProgramFormula(program, module, goal_string, [goal]) &
   Abduction(program, goal, computed_answer, abducibles) &
   AbducibleToString(abducibles, program, module, abducible_strings) &
   AnswerString(program, module, computed_answer, answer_string).


PREDICATE AbducibleToString : List(Formula) * Program * String * List(String).

AbducibleToString([], _, _, []).
AbducibleToString([abducible|abducibles], program, module,
	[abducible_string|abducible_strings]) <-
   ProgramFormulaToString(program, module, abducible, abducible_string) &
   AbducibleToString(abducibles, program, module, abducible_strings).
