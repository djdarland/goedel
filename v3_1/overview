
                     The Goedel Programming Language
                     -------------------------------

Version 1.4 of the Goedel system is now available. Details on how it can be 
obtained are given below. 

Goedel is a declarative, general-purpose programming language in the family of
logic programming languages.  It is a strongly typed language, the type system 
being based on many-sorted logic with parametric polymorphism.  It has a module
system.  Goedel supports infinite precision integers, infinite precision 
rationals, and also floating-point numbers.  It can solve constraints over 
finite domains of integers and also linear rational constraints. It supports 
processing of finite sets.  It also has a flexible computation rule and a 
pruning operator which generalises the commit of the concurrent logic 
programming languages.  Considerable emphasis is placed on Goedel's meta-
logical facilities which provide significant support for meta-programs that do 
analysis, transformation, compilation, verification, debugging, and so on.  

This release contains:

(a) the Goedel system, 
(b) the SAGE partial evaluator for Goedel,
(c) a user manual, and 
(d) around 50 (mostly small) example programs.

A book on the language is now available:
    The Goedel Programming Language,
    P.M. Hill & J.W. Lloyd, 
    MIT Press, 1994, ISBN 0-262-08229-2.
The book is divided into two parts.  The first part gives an informal 
overview of the language and includes example programs.  The second part 
contains a definition of the syntax and semantics of the language.  

Goedel should be of particular interest to four groups:

(a) Those doing research in program transformation, program analysis,
debugging, and a wide range of other meta-programming tasks. Goedel provides
significant advantages for such tasks since it is much more declarative than
Prolog, for example, and also a great deal of effort has been put into 
providing special support for meta-programming. Goedel makes possible advanced 
software engineering tools such as declarative debuggers and compiler 
generators.

(b) Those doing research in parallel implementations of logic programming
languages. The declarative nature of Goedel greatly eases the task of 
building a parallel implementation of the language (compared to Prolog,
for example, whose non-logical facilities cause serious difficulties for
parallel implementations) and offers substantial scope for parallelization 
in such implementations.  

(c) Those teaching logic programming. Goedel fits much better than Prolog,
for example, into the undergraduate and graduate curricula since it has a type 
and module system similar to other commonly used teaching langauges such as 
Miranda and Modula-2. Also most of the problematical non-logical predicates
of Prolog simply aren't present in Goedel (they are replaced by declarative
counterparts) and so the cause of much confusion and difficulty is avoided.

(d) Those working in the theory of logic programming. There has always been a
large gap between the theory of logic programming (as in "Foundations of
Logic Programming", for example) and the much more complex and unsatisfactory 
semantics of practical logic programming languages, such as Prolog. Goedel
significantly narrows this semantic gap. This means that theoreticians can 
apply their "pure" theories of program transformation, program analysis, etc., 
more or less directly to Goedel and do not have to be concerned with 
complications of extending their theories to cope with the many non-logical
aspects of languages such as Prolog.

This release provides a (substantial) subset of the language.  The remainder of
the implementation is expected to be completed over the next year or so.

SICStus Prolog version 2.1 #6 (or later) is required to compile the Goedel
system. As an alternative for those who do not have SICStus Prolog, a run-time
system is provided which gives a version that runs on a SPARCstation.


How to obtain Goedel
--------------------

The system is available by anonymous ftp.  The ftp sites are

ftp.cs.kuleuven.ac.be     (134.58.41.2)

and 

ftp.cs.bris.ac.uk     (137.222.102.102).

At the Leuven site, the file README in the directory

/pub/logic-prgm/goedel

gives further instructions on how to obtain the system.  For the Bristol site,
the README file is in the directory

/goedel.

If you have not already done so, please register when you obtain the system.
This is done by sending a message consisting of your name, institution, and 
address to:

goedel@compsci.bristol.ac.uk.

